
enystems}}
'''Duck typing''' in computer programming is an application of the [[duck test]]&mdash;"If it walks like a duck and it quacks like a duck, then it must be a duck"&mdash;to determine if an [[object (computer science)|object]] can be used for a particular purpose. With normal typing, suitability is determined by an object's type. In duck typing, an object's suitability is determined by the presence of certain [[Method (computer programming)|methods]] and properties, rather than the type of the object itself.<ref>{{Cite web|url=https://docs.python.org/3/glossary.html#term-duck-typing|title=Glossary — Python 3.7.1 documentation|website=docs.python.org|access-date=2018-11-08}}</ref> 

==Example==
This is a simple example in [[Python (programming language)|Python]] 3 that demonstrates how any object may be used in any context, up until it is used in a way that it does not support.

<syntaxhighlight lang=Python>
class Duck:
    def fly(self):
        print("Duck flying")

class Airplane:
    def fly(self):
        print("Airplane flying")

class Whale:
    def swim(self):
        print("Whale swimming")

def fly(entity):
    entity.fly()

duck = Duck()
airplane = Airplane()
whale = Whale()

fly(duck) # prints `Duck flying`
fly(airplane) # prints `Airplane flying`
fly(whale) # Throws the error `'Whale' object has no attribute 'fly'`
</syntaxhighlight>

==In statically typed languages==
Certain usually [[Type system#Static typing|statically typed]] languages such as [[Boo (programming language)|Boo]] and the version 4 release of [[C Sharp (programming language)|C#]] have extra type annotations<ref>[http://boo.codehaus.org/Duck+Typing Boo: Duck Typing] {{webarchive |url=https://web.archive.org/web/20081006075246/http://boo.codehaus.org/Duck+Typing |date=October 6, 2008 }}</ref>
<ref>{{cite web|url=http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx|title=Anders Hejlsberg Introduces C# 4.0 at PDC 2008|publisher=|accessdate=30 January 2017}}</ref> that instruct the compiler to arrange for type checking of classes to occur at run-time rather than compile time, and include run-time type checking code in the compiled output.

==Comparison with other type systems==

===Structural type systems===
Duck typing is similar to, but distinct from [[Structural type system|structural typing]]. Structural typing is a [[Type system#Static typing|static typing]] system that determines type compatibility and equivalence by a type's structure, whereas duck typing is [[Type system#Dynamic typing|dynamic]] and determines type compatibility by only that part of a type's structure that is accessed during [[Run time (program lifecycle phase)|run time]].

The [[OCaml]], [[Scala (programming language)|Scala]], [[Go (programming language)|Go]], [[Elm (programming language)|Elm]],<ref>{{cite web|url=http://guide.elm-lang.org/core_language.html|title=Core Language · An Introduction to Elm|first=Evan|last=Czaplicki|publisher=|accessdate=30 January 2017}}</ref>, [[Gosu (programming language)|Gosu]] and PureScript languages support structural typing to varying degrees.

===Protocols and Interfaces===
[[Protocol (object-oriented programming)|Protocols and interfaces]] can provide some of the benefits of duck typing, but duck typing is distinct in that no explicit interface is defined. For example, if a third party library implements a class that cannot be modified, a client cannot use an instance of it with an interface unknown to that library even if the class does in fact satisfy the interface requirements. (A common solution to this problem is the [[Adapter pattern]].) Duck typing would allow this. Again, all of an interface must be satisfied for compatibility.

===Templates or generic types===
[[Template metaprogramming|Template]], or [[Generic programming|generic]] functions or methods apply the duck test in a [[Type system#Static typing|static typing]] context; this brings all the advantages and disadvantages of [[Type system#Static and dynamic type checking in practice|static versus dynamic type checking]] in general. Duck typing can also be more flexible in that only the methods ''actually called at run time'' need to be implemented, while templates require implementation of all methods that ''cannot be proven [[Unreachable code|unreachable]] at compile time''.

Examples include the languages [[C++]] and [[D (programming language)|D]] with templates, which developed from [[Ada (programming language)|Ada]] generics.

==Criticism==

=== Criticism of the term itself ===
Use of the term "duck typing" has been considered superfluous in light of the fact that other terms, such as [[Late binding|dynamic binding]], express the concept more clearly.<ref>{{cite web |url=https://ericlippert.com/2014/01/02/what-is-duck-typing/comment-page-1/ |title=What is "duck typing"?
 |last=Lippert |first=Eric |date=2 Jan 2014 |website=Fabulous adventures in coding |access-date=25 May 2016 |quote=...&nbsp;the whole idea of duck typing is fundamentally incoherent&nbsp;...'}}</ref> To proponents of [[static type checking]], duck typing suggests the ''absence'' of typing, making its incorporation of the term ''typing'' appear incoherent.

==See also==
* [[Extension methods]]
* [[UFCS]]
* [[Loose coupling]]
* [[Monkey patch]]

==References==

{{reflist}}

{{DEFAULTSORT:Duck Typing}}
[[Category:Articles with example pseudocode]]
[[Category:Object-oriented programming]]
[[Category:Type theory]]

